<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-Time Share App</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
      body {
        font-family: "Arial", sans-serif;
        background: #1d1f21;
        color: #c5c8c6;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        margin: 0;
      }
      h2 {
        color: #81a2be;
        margin: 0px;
      }
      #textarea {
        width: 90%;
        height: 600px;
        padding: 10px;
        margin: 20px 0;
        border: none;
        border-radius: 5px;
        background: #282a2e;
        color: #c5c8c6;
        font-size: 16px;
        resize: none;
      }
      form {
        margin: 20px 0;
      }
      input[type="file"] {
        margin-bottom: 10px;
      }
      button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background: #81a2be;
        color: #1d1f21;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s ease;
      }
      button:hover {
        background: #5f7a99;
      }
      .file-list {
        list-style-type: none;
        padding: 0;
        width: 80%;
        height: 400px;
        overflow-y: auto;
      }
      .file-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #282a2e;
        padding: 10px;
        margin: 5px 0;
        border-radius: 5px;
      }
      .file-list li a {
        color: #c5c8c6;
        text-decoration: none;
        transition: color 0.3s ease;
      }
      .file-list li a:hover {
        color: #81a2be;
      }
      .file-list li form {
        display: inline;
      }
      .file-list li form button {
        background: #cc6666;
        color: #1d1f21;
      }
      .file-list li form button:hover {
        background: #a54b4b;
      }
      #drop-zone {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        color: #fff;
        font-size: 24px;
        z-index: 1000;
      }
    </style>
  </head>
  <body>
    <textarea
      id="textarea"
      style="resize: vertical"
      placeholder="Type something..."
    ></textarea>
    <h2>Upload Files</h2>
    <form id="upload-form" action="/upload" method="post" enctype="multipart/form-data">
      <input id="file-input" type="file" name="files" multiple required />
      <button type="submit">Upload</button>
    </form>
    <h2>Files</h2>
    <ul class="file-list" id="file-list">
      <% files.forEach(file => { %>
      <li data-filename="<%= file %>">
        <a href="/uploads/<%= file %>" download><%= file %></a>
        <button type="button" class="delete-button">Delete</button>
      </li>
      <% }) %>
    </ul>

    <div id="drop-zone">Drop files here to upload</div>

    <script>
      const socket = io();
      const textarea = document.getElementById("textarea");
      const fileList = document.getElementById("file-list");
      const dropZone = document.getElementById("drop-zone");
      const fileInput = document.getElementById("file-input");
      const uploadForm = document.getElementById("upload-form");

      socket.on("textUpdate", (text) => {
        textarea.value = text;
      });

      textarea.addEventListener("input", () => {
        socket.emit("textChange", textarea.value);
      });

      socket.on("fileUpdate", () => {
        fetch("/")
          .then((response) => response.text())
          .then((html) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            fileList.innerHTML = doc.getElementById("file-list").innerHTML;
            attachDeleteEventListeners(); // Re-attach event listeners after updating the file list
          });
      });

      let dragCounter = 0;

      document.addEventListener("dragenter", (event) => {
        event.preventDefault();
        if (event.dataTransfer.items && event.dataTransfer.items[0].kind === 'file') {
          dragCounter++;
          dropZone.style.display = "flex";
        }
      });

      document.addEventListener("dragleave", (event) => {
        event.preventDefault();
        if (event.dataTransfer.items && event.dataTransfer.items[0].kind === 'file') {
          dragCounter--;
          if (dragCounter === 0) {
            dropZone.style.display = "none";
          }
        }
      });

      document.addEventListener("drop", (event) => {
        event.preventDefault();
        dropZone.style.display = "none";
        dragCounter = 0;
        const files = event.dataTransfer.files;
        if (files.length > 0) {
          fileInput.files = files;
          uploadForm.submit();
        }
      });

      window.addEventListener("dragleave", (event) => {
        if (event.clientX === 0 && event.clientY === 0) {
          dropZone.style.display = "none";
          dragCounter = 0;
        }
      });

      document.addEventListener("dragover", (event) => {
        event.preventDefault();
      });

      textarea.addEventListener("dragover", (event) => {
        event.stopPropagation();
      });

      textarea.addEventListener("drop", (event) => {
        event.stopPropagation();
      });

      function attachDeleteEventListeners() {
        const deleteButtons = document.querySelectorAll('.delete-button');
        deleteButtons.forEach(button => {
          button.addEventListener('click', () => {
            const li = button.closest('li');
            const filename = li.getAttribute('data-filename');
            
            fetch('/delete', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: new URLSearchParams({ filename })
            }).then(response => {
              if (response.ok) {
                li.remove();
                socket.emit('fileUpdate');
              } else {
                console.error('Failed to delete file');
              }
            });
          });
        });
      }

      attachDeleteEventListeners(); // Attach event listeners initially
    </script>
  </body>
</html>
