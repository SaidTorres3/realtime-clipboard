<!DOCTYPE html>
<html class="h-full" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RealTime-Clipboard</title>
    <script src="/socket.io/socket.io.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Inter", sans-serif;
      }

      #drop-zone {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        color: #fff;
        font-size: 24px;
        z-index: 1000;
      }

      .sidebar {
        width: 23%;
        min-width: 250px;
        background-color: #061228;
        padding: 20px;
        display: flex;
        flex-direction: column;
        max-height: 100%;
        box-sizing: border-box;
        position: relative;
        overflow: auto;
      }

      .resizer {
        width: 5px;
        background-color: #4a5568;
        cursor: ew-resize;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
      }

      .file-list {
        overflow-y: auto;
        flex-grow: 1;
        max-height: calc(
          100vh - 220px
        ); /* Adjust based on the actual height of other elements */
      }

      .content {
        flex-grow: 1;
        padding: 20px;
      }

      /* Media query for mobile devices */
      @media (max-width: 768px) {
        body {
          flex-direction: column-reverse;
        }

        textarea {
          resize: vertical;
          min-height: 300px;
        }

        .sidebar {
          width: 100%;
          min-width: 100%;
          padding: 10px;
        }

        .resizer {
          display: none;
        }

        .content {
          padding: 10px;
          width: 100%;
        }

        .file-list {
          max-height: 300px; /* Adjust based on the actual height of other elements */
        }
      }
    </style>
  </head>

  <body class="bg-black text-gray-100 flex min-h-full">
    <!-- Sidebar -->
    <div class="sidebar">
      <div>
        <div class="mb-6">
          <h3 class="text-xl font-semibold mb-2">Upload Files</h3>
          <form
            id="upload-form"
            class="space-y-4"
            action="/upload"
            method="post"
            enctype="multipart/form-data"
          >
            <input
              id="file-input"
              type="file"
              name="files"
              multiple
              required
              class="block w-full text-sm text-gray-200 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-500 file:text-gray-100 hover:file:bg-blue-400"
            />
            <button
              type="submit"
              class="w-full py-2 bg-blue-500 text-gray-100 rounded-lg hover:bg-blue-400 transition duration-300"
            >
              Upload
            </button>
          </form>
        </div>
        <div>
          <h3 class="text-xl font-semibold mb-2">Files</h3>
          <ul class="file-list w-full space-y-2" id="file-list">
            <% files.forEach(file => { %>
            <li
              data-filename="<%= file %>"
              class="flex justify-between items-center bg-gray-700 p-4 rounded-lg"
            >
              <a
                href="/uploads/<%= file %>"
                download
                class="text-gray-200 hover:text-blue-400 transition duration-300"
              >
                <%= file %>
              </a>
              <button
                type="button"
                class="delete-button bg-red-500 text-gray-100 px-3 py-1 rounded-lg hover:bg-red-400 transition duration-300"
              >
                Delete
              </button>
            </li>
            <% }) %>
          </ul>
        </div>
      </div>
      <div class="resizer"></div>
    </div>

    <!-- Main Content -->
    <div
      style="display: flex"
      class="content flex flex-col items-center justify-center"
    >
      <textarea
        id="textarea"
        style="flex-grow: 1; background-color: #121f33;"
        class="w-full h-full h-64 p-4 mb-4 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder="Type something..."
      ></textarea>
    </div>

    <div id="drop-zone" class="flex items-center justify-center">
      Drop files here to upload
    </div>

    <script>
      const socket = io();
      const textarea = document.getElementById("textarea");
      const fileList = document.getElementById("file-list");
      const dropZone = document.getElementById("drop-zone");
      const fileInput = document.getElementById("file-input");
      const uploadForm = document.getElementById("upload-form");
      const resizer = document.querySelector(".resizer");
      const sidebar = document.querySelector(".sidebar");

      socket.on("textUpdate", (text) => {
        textarea.value = text;
      });

      textarea.addEventListener("input", () => {
        socket.emit("textChange", textarea.value);
      });

      socket.on("fileUpdate", () => {
        fetch("/")
          .then((response) => response.text())
          .then((html) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            fileList.innerHTML = doc.getElementById("file-list").innerHTML;
            attachDeleteEventListeners(); // Re-attach event listeners after updating the file list
          });
      });

      let dragCounter = 0;

      document.addEventListener("dragenter", (event) => {
        event.preventDefault();
        if (
          event.dataTransfer.items &&
          event.dataTransfer.items[0].kind === "file"
        ) {
          dragCounter++;
          dropZone.style.display = "flex";
        }
      });

      document.addEventListener("dragleave", (event) => {
        event.preventDefault();
        if (
          event.dataTransfer.items &&
          event.dataTransfer.items[0].kind === "file"
        ) {
          dragCounter--;
          if (dragCounter === 0) {
            dropZone.style.display = "none";
          }
        }
      });

      document.addEventListener("drop", (event) => {
        event.preventDefault();
        dropZone.style.display = "none";
        dragCounter = 0;
        const files = event.dataTransfer.files;
        if (files.length > 0) {
          fileInput.files = files;
          uploadForm.submit();
        }
      });

      window.addEventListener("dragleave", (event) => {
        if (event.clientX === 0 && event.clientY === 0) {
          dropZone.style.display = "none";
          dragCounter = 0;
        }
      });

      document.addEventListener("dragover", (event) => {
        event.preventDefault();
      });

      textarea.addEventListener("dragover", (event) => {
        event.stopPropagation();
      });

      textarea.addEventListener("drop", (event) => {
        event.stopPropagation();
      });

      function attachDeleteEventListeners() {
        const deleteButtons = document.querySelectorAll(".delete-button");
        deleteButtons.forEach((button) => {
          button.addEventListener("click", () => {
            const li = button.closest("li");
            const filename = li.getAttribute("data-filename");

            fetch(`/files/${filename}`, {
              method: "DELETE",
            }).then((response) => {
              if (response.ok) {
                li.remove();
                socket.emit("fileUpdate");
              } else {
                console.error("Failed to delete file");
              }
            });
          });
        });
      }

      attachDeleteEventListeners(); // Attach event listeners initially

      // Resizer logic
      resizer.addEventListener("mousedown", function (e) {
        document.addEventListener("mousemove", resize);
        document.addEventListener("mouseup", stopResize);
      });

      function resize(e) {
        const newWidth = e.clientX - sidebar.offsetLeft;
        sidebar.style.width = newWidth + "px";
      }

      function stopResize() {
        document.removeEventListener("mousemove", resize);
        document.removeEventListener("mouseup", stopResize);
      }
    </script>
  </body>
</html>
